type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
row.names(temp_merged) <- 1:nrow(temp_merged)
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
sheet_url <- "https://docs.google.com/spreadsheets/d/1R7dxLoPc-AjvmsdbExF5i2XyfMtZHIG24ziTj-er8Rk/"
parcel_proposals <- gs_url(sheet_url) %>% gs_read("Sheet1", range = "A1:E60")
parcel_proposals$APN <- as.character(parcel_proposals$APN)
row.names(parcel_proposals) <- parcel_proposals$APN
parcel_proposals <- parcel_proposals %>% subset(select = -name)
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
row.names(temp_merged) <- 1:nrow(temp_merged)
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
sheet_url <- "https://docs.google.com/spreadsheets/d/1R7dxLoPc-AjvmsdbExF5i2XyfMtZHIG24ziTj-er8Rk/"
# parcel_proposals <- read_csv("./inputs/parcel_proposals.csv", col_types = cols(APN = col_character(), type = col_character()))
parcel_proposals <- gs_url(sheet_url) %>% gs_read("Sheet1", range = "A1:E60")
parcel_proposals$APN <- as.character(parcel_proposals$APN)
row.names(parcel_proposals) <- parcel_proposals$APN
parcel_proposals <- parcel_proposals %>% subset(select = -name)
# Begin support for multiple uses i.e. this means duplicated APNs.
# biking_long <- biking %>% gather(type_rank, time_biking, -c(spatial_id))
# What I need to do now is load the data, then melt from wide to long
# The problem was that I wasn't trying to make this long in the usual sense, because I don't necessarily need to preserve type1, type2, type3. I really just need to lengthen or even flatten the data.
# APN 16902016 to check it worked
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# View(type_counts)
# Really just for testing.
# parcel_proposals %>% group_by(type) %>% summarize(n())
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
toc()
tic('weight adding function')
temp_merged <- weight_adder(temp_merged, weights)
toc()
tic('intermediate sorting')
# Now just need to append the two dataframes and update the ranks where appropriate
# For now, I'll just keep all but could easily trim each subset to only the desired amount of each amenity.
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
row.names(temp_merged) <- 1:nrow(temp_merged)
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
type_splitter(split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]])
split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
split.data.frame(temp_merged, f = temp_merged$type)[[1]]
type_splitter(split.data.frame(temp_merged, f = temp_merged$type)[[1]])
temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
View(temp_df)
type_splitter(temp_df)
type_splitter(temp_df)
temp_df <- split(temp_df, f = temp_df$type)[[1]]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
temp_type <- temp_df$type[[1]]
temp_type
c(0:(amenity_info[temp_type,]$num - 1), rep(NA, type_counts[temp_type][[1]]))
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
print(type)
if (type %in% new_parcel_types) {
df$rank <- c(0:(amenity_info[type,]$num - 1), rep(NA, type_counts[type][[1]]))
}
return(df)
}
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
temp_df <- split(temp_df, f = temp_df$type)[[2]]
temp_type <- temp_df$type[[1]]
temp_type
c(0:(amenity_info[temp_type,]$num - 1), rep(NA, type_counts[temp_type][[1]]))
type_counts[temp_type][[1]]
temp_rank_length <- amenity_info[temp_type,]$num - 1
temp_rank_length
temp_rank_length <- amenity_info[temp_type,]$num
temp_rank_length
1:(temp_rank_length) - 1
1:(10) - 1
c(1:(temp_rank_length) - 1, rep(NA, nrow(temp_df) - temp_rank_length))
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
print(type)
if (type %in% new_parcel_types) {
rank_length <- amenity_info[type,]$num
df$rank <- c(1:rank_length - 1, rep(NA, nrow(df) - rank_length))
}
return(df)
}
type_splitter <- function(df) {
list_dfs <- split(df, f = df$type)
# The data frames are now split by type, just need to iterate over this and reassign ranks
list_dfs <- lapply(list_dfs, rank_fixer)
return(bind_rows(list_dfs))
}
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
rep(NA,0)
amenity_info <- read_csv("./inputs/amenity_categories_revised.csv")
# may as well add the min column here
amenity_info$num <- pmin(amenity_info$count, amenity_info$found)
row.names(amenity_info) <- amenity_info$amenity_categories
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
amenity_info <- read_csv("./inputs/amenity_categories_revised.csv")
# may as well add the min column here
amenity_info$num <- pmin(amenity_info$count, amenity_info$found)
row.names(amenity_info) <- amenity_info$amenity_categories
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
yikes <- "yikes"
rm(c("yikes"))
rm(list = ("yikes"))
rm(list = ("temp_df", "temp_type", "temp_rank_length"))
rm(list = c("temp_df", "temp_type", "temp_rank_length"))
tic("total")
tic("load data from google and sort")
sheet_url <- "https://docs.google.com/spreadsheets/d/1R7dxLoPc-AjvmsdbExF5i2XyfMtZHIG24ziTj-er8Rk/"
# parcel_proposals <- read_csv("./inputs/parcel_proposals.csv", col_types = cols(APN = col_character(), type = col_character()))
parcel_proposals <- gs_url(sheet_url) %>% gs_read("Sheet1", range = "A1:E60")
parcel_proposals$APN <- as.character(parcel_proposals$APN)
row.names(parcel_proposals) <- parcel_proposals$APN
parcel_proposals <- parcel_proposals %>% subset(select = -name)
# Begin support for multiple uses i.e. this means duplicated APNs.
# biking_long <- biking %>% gather(type_rank, time_biking, -c(spatial_id))
# What I need to do now is load the data, then melt from wide to long
# The problem was that I wasn't trying to make this long in the usual sense, because I don't necessarily need to preserve type1, type2, type3. I really just need to lengthen or even flatten the data.
# APN 16902016 to check it worked
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# View(type_counts)
# Really just for testing.
# parcel_proposals %>% group_by(type) %>% summarize(n())
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
toc()
tic('weight adding function')
temp_merged <- weight_adder(temp_merged, weights)
toc()
tic('intermediate sorting')
# Now just need to append the two dataframes and update the ranks where appropriate
# For now, I'll just keep all but could easily trim each subset to only the desired amount of each amenity.
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
toc()
tic("vectorized loop")
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
print(type)
if (type %in% new_parcel_types) {
rank_length <- amenity_info[type,]$num
df$rank <- c(1:rank_length - 1, rep(NA, nrow(df) - rank_length))
}
return(df)
}
type_splitter <- function(df) {
list_dfs <- split(df, f = df$type)
# The data frames are now split by type, just need to iterate over this and reassign ranks
list_dfs <- lapply(list_dfs, rank_fixer)
return(bind_rows(list_dfs))
}
# Running the code below line by line to debug
# temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
# temp_df <- split(temp_df, f = temp_df$type)[[2]]
# temp_type <- temp_df$type[[1]]
#
# # Need to fix the second half. It needs to be nrows of temp_df minus the num desired.
# temp_rank_length <- amenity_info[temp_type,]$num
# c(1:(temp_rank_length) - 1, rep(NA, nrow(temp_df) - temp_rank_length))
# rm(list = c("temp_df", "temp_type", "temp_rank_length"))
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
toc()
tic('scores stuff')
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
bg_scores <- temp_merged %>% group_by(spatial_id) %>% summarise('access_score2' = sum(scores, na.rm = TRUE)) %>% left_join(bg_scores)
bg_scores$diff <- bg_scores$access_score2- bg_scores$access_score
bg_scores$diff_prcnt <- bg_scores$access_score2/bg_scores$access_score
toc()
toc()
# range(bg_scores$diff_prcnt)
# View(bg_scores)
View(bg_scores)
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
score_calc(temp_merged$time_biking[1], temp_merged$time_driving[1], temp_merged$time_transit[1], temp_merged$time_walking[1], temp_merged$abs_good[1], temp_merged$rank[1], temp_merged$type[1])
View(temp_merged)
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
# print(type)
if (type %in% new_parcel_types) {
rank_length <- amenity_info[type,]$num
df$rank <- c(1:rank_length - 1, rep(NA, nrow(df) - rank_length))
}
return(df)
}
score_calc(temp_merged$time_biking[1], temp_merged$time_driving[1], temp_merged$time_transit[1], temp_merged$time_walking[1], temp_merged$abs_good[1], temp_merged$rank[1], temp_merged$type[1])
temp_merged$time_biking[1]
temp_merged$time_driving[1]
temp_merged$time_transit[1]
temp_merged$time_walking[1]
temp_merged$abs_good[1]
temp_merged$rank[1]
temp_merged$type[1]
View(weights)
type
type
type <- 'other'
# This would probably be a good function to port to rcpp
score_calc <- function(time_biking, time_driving, time_transit, time_walking,  abs_good, rank, type) {
# I do like the idea of keeping the helper functions in here. Could time it to see what the difference is but the helper functions do keep this one a little cleaner and just generally easier to follow.
if (! type %in% row.names(weights)) {
type <- 'other'
}
# Eq 5
# it's exp of weight*times
marg_bike    <- exp(time_biking*weights[type , 'marginal_bike'][[1]])
marg_drive   <- exp(time_driving*weights[type , 'marginal_drive'][[1]])
marg_transit <- exp(time_transit*weights[type , 'marginal_transit'][[1]])
marg_walk    <- exp(time_walking*weights[type , 'marginal_walk'][[1]])
print(c("margs: ", marg_bike, marg_drive, marg_transit, marg_walk))
# Eq 4
abs_bike    <- marg_bike*weights[type, 'abs_bike'][[1]]
abs_drive   <- marg_drive*weights[type, 'abs_drive'][[1]]
abs_transit <- marg_transit*weights[type, 'abs_transit'][[1]]
abs_walk    <- marg_walk*weights[type, 'abs_walk'] [[1]]
print(c("abs", abs_bike, abs_drive, abs_transit, abs_walk))
# Eq 3
total_mobility_score <- abs_bike + abs_drive + abs_transit + abs_walk
print(total_mobility_score)
# Eq 2, originally in a separate function but I'll move it here to see how it works.
marg_good <- marg_good_func(rank, type)
# Eq 1
factor_in_rank <- marg_good*total_mobility_score
# Final score, could also put the abs_good function here, may not be a bad idea.
score <- abs_good*factor_in_rank
# print(total_mobility_score)
# print(factor_in_rank)
return(score)
}
score_calc(temp_merged$time_biking[1], temp_merged$time_driving[1], temp_merged$time_transit[1], temp_merged$time_walking[1], temp_merged$abs_good[1], temp_merged$rank[1], temp_merged$type[1])
exp(time_biking*weights[type , 'marginal_bike'][[1]])
exp(3*weights[type , 'marginal_bike'][[1]])
[type , 'marginal_bike'][[1]]
[type , 'marginal_bike']
weights[type , 'marginal_bike'][[1]]
weights[type , 'marginal_bike']
type
weights <- read_csv("./inputs/weights.csv")
row.names(weights) <- weights$type
# This would probably be a good function to port to rcpp
score_calc <- function(time_biking, time_driving, time_transit, time_walking,  abs_good, rank, type) {
# I do like the idea of keeping the helper functions in here. Could time it to see what the difference is but the helper functions do keep this one a little cleaner and just generally easier to follow.
if (! type %in% row.names(weights)) {
type <- 'other'
}
# Eq 5
# it's exp of weight*times
marg_bike    <- exp(time_biking*weights[type , 'marginal_bike'][[1]])
marg_drive   <- exp(time_driving*weights[type , 'marginal_drive'][[1]])
marg_transit <- exp(time_transit*weights[type , 'marginal_transit'][[1]])
marg_walk    <- exp(time_walking*weights[type , 'marginal_walk'][[1]])
# print(c("margs: ", marg_bike, marg_drive, marg_transit, marg_walk))
# Eq 4
abs_bike    <- marg_bike*weights[type, 'abs_bike'][[1]]
abs_drive   <- marg_drive*weights[type, 'abs_drive'][[1]]
abs_transit <- marg_transit*weights[type, 'abs_transit'][[1]]
abs_walk    <- marg_walk*weights[type, 'abs_walk'] [[1]]
# print(c("abs", abs_bike, abs_drive, abs_transit, abs_walk))
# Eq 3
total_mobility_score <- abs_bike + abs_drive + abs_transit + abs_walk
# print(total_mobility_score)
# Eq 2, originally in a separate function but I'll move it here to see how it works.
marg_good <- marg_good_func(rank, type)
# Eq 1
factor_in_rank <- marg_good*total_mobility_score
# Final score, could also put the abs_good function here, may not be a bad idea.
score <- abs_good*factor_in_rank
# print(total_mobility_score)
# print(factor_in_rank)
return(score)
}
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
ptm <- proc.time()
# Type argument needs to be the general type argument here.
# score_calc(time_biking = 3, time_driving = 3, time_transit = 10, time_walking = 10,  abs_good = 4.29, rank = 0, type = 'atm')
# score_calc(2,1,3,7,6.66,0,'restaurant')
# Now for the whole thing.
merged_data$scores <- score_calc(merged_data$time_biking, merged_data$time_driving, merged_data$time_transit, merged_data$time_walking, merged_data$abs_good, merged_data$rank, merged_data$type)
bg_scores <- merged_data %>% group_by(spatial_id) %>% summarise('access_score' = sum(scores, na.rm = TRUE))
proc.time() - ptm
# bg_scores_save <- bg_scores
tic("total")
tic("load data from google and sort")
sheet_url <- "https://docs.google.com/spreadsheets/d/1R7dxLoPc-AjvmsdbExF5i2XyfMtZHIG24ziTj-er8Rk/"
# parcel_proposals <- read_csv("./inputs/parcel_proposals.csv", col_types = cols(APN = col_character(), type = col_character()))
parcel_proposals <- gs_url(sheet_url) %>% gs_read("Sheet1", range = "A1:E60")
parcel_proposals$APN <- as.character(parcel_proposals$APN)
row.names(parcel_proposals) <- parcel_proposals$APN
parcel_proposals <- parcel_proposals %>% subset(select = -name)
# Begin support for multiple uses i.e. this means duplicated APNs.
# biking_long <- biking %>% gather(type_rank, time_biking, -c(spatial_id))
# What I need to do now is load the data, then melt from wide to long
# The problem was that I wasn't trying to make this long in the usual sense, because I don't necessarily need to preserve type1, type2, type3. I really just need to lengthen or even flatten the data.
# APN 16902016 to check it worked
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# View(type_counts)
# Really just for testing.
# parcel_proposals %>% group_by(type) %>% summarize(n())
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
toc()
tic('weight adding function')
temp_merged <- weight_adder(temp_merged, weights)
toc()
tic('intermediate sorting')
# Now just need to append the two dataframes and update the ranks where appropriate
# For now, I'll just keep all but could easily trim each subset to only the desired amount of each amenity.
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
toc()
tic("vectorized loop")
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
# print(type)
if (type %in% new_parcel_types) {
rank_length <- amenity_info[type,]$num
df$rank <- c(1:rank_length - 1, rep(NA, nrow(df) - rank_length))
}
return(df)
}
type_splitter <- function(df) {
list_dfs <- split(df, f = df$type)
# The data frames are now split by type, just need to iterate over this and reassign ranks
list_dfs <- lapply(list_dfs, rank_fixer)
return(bind_rows(list_dfs))
}
# Running the code below line by line to debug
# temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
# temp_df <- split(temp_df, f = temp_df$type)[[2]]
# temp_type <- temp_df$type[[1]]
#
# # Need to fix the second half. It needs to be nrows of temp_df minus the num desired.
# temp_rank_length <- amenity_info[temp_type,]$num
# c(1:(temp_rank_length) - 1, rep(NA, nrow(temp_df) - temp_rank_length))
# rm(list = c("temp_df", "temp_type", "temp_rank_length"))
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
toc()
tic('scores stuff')
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
# Use for debugging
# score_calc(temp_merged$time_biking[1], temp_merged$time_driving[1], temp_merged$time_transit[1], temp_merged$time_walking[1], temp_merged$abs_good[1], temp_merged$rank[1], temp_merged$type[1])
bg_scores <- temp_merged %>% group_by(spatial_id) %>% summarise('access_score2' = sum(scores, na.rm = TRUE)) %>% left_join(bg_scores)
bg_scores$diff <- bg_scores$access_score2- bg_scores$access_score
bg_scores$diff_prcnt <- bg_scores$access_score2/bg_scores$access_score
toc()
toc()
# range(bg_scores$diff_prcnt)
View(bg_scores)
tic("total")
tic("load data from google and sort")
sheet_url <- "https://docs.google.com/spreadsheets/d/1R7dxLoPc-AjvmsdbExF5i2XyfMtZHIG24ziTj-er8Rk/"
# parcel_proposals <- read_csv("./inputs/parcel_proposals.csv", col_types = cols(APN = col_character(), type = col_character()))
parcel_proposals <- gs_url(sheet_url) %>% gs_read("Sheet1", range = "A1:E60")
parcel_proposals$APN <- as.character(parcel_proposals$APN)
row.names(parcel_proposals) <- parcel_proposals$APN
parcel_proposals <- parcel_proposals %>% subset(select = -name)
# Begin support for multiple uses i.e. this means duplicated APNs.
# biking_long <- biking %>% gather(type_rank, time_biking, -c(spatial_id))
# What I need to do now is load the data, then melt from wide to long
# The problem was that I wasn't trying to make this long in the usual sense, because I don't necessarily need to preserve type1, type2, type3. I really just need to lengthen or even flatten the data.
# APN 16902016 to check it worked
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# View(type_counts)
# Really just for testing.
# parcel_proposals %>% group_by(type) %>% summarize(n())
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
toc()
tic('weight adding function')
temp_merged <- weight_adder(temp_merged, weights)
toc()
tic('intermediate sorting')
# Now just need to append the two dataframes and update the ranks where appropriate
# For now, I'll just keep all but could easily trim each subset to only the desired amount of each amenity.
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
toc()
tic("vectorized loop")
rank_fixer <- function(df) {
# Only need to do this if type is in new type counts
type <- df$type[1]
# print(type)
if (type %in% new_parcel_types) {
rank_length <- amenity_info[type,]$num
df$rank <- c(1:rank_length - 1, rep(NA, nrow(df) - rank_length))
}
return(df)
}
type_splitter <- function(df) {
list_dfs <- split(df, f = df$type)
# The data frames are now split by type, just need to iterate over this and reassign ranks
list_dfs <- lapply(list_dfs, rank_fixer)
return(bind_rows(list_dfs))
}
# Running the code below line by line to debug
# temp_df <- split.data.frame(temp_merged, f = temp_merged$spatial_id)[[1]]
# temp_df <- split(temp_df, f = temp_df$type)[[2]]
# temp_type <- temp_df$type[[1]]
#
# # Need to fix the second half. It needs to be nrows of temp_df minus the num desired.
# temp_rank_length <- amenity_info[temp_type,]$num
# c(1:(temp_rank_length) - 1, rep(NA, nrow(temp_df) - temp_rank_length))
# rm(list = c("temp_df", "temp_type", "temp_rank_length"))
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
toc()
tic('scores stuff')
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
temp_merged$scores <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
# Use for debugging
# score_calc(temp_merged$time_biking[1], temp_merged$time_driving[1], temp_merged$time_transit[1], temp_merged$time_walking[1], temp_merged$abs_good[1], temp_merged$rank[1], temp_merged$type[1])
bg_scores <- temp_merged %>% group_by(spatial_id) %>% summarise('access_score2' = sum(scores, na.rm = TRUE)) %>% left_join(bg_scores)
bg_scores$diff <- bg_scores$access_score2- bg_scores$access_score
bg_scores$diff_prcnt <- bg_scores$access_score2/bg_scores$access_score
toc()
toc()
# range(bg_scores$diff_prcnt)
View(bg_scores)
